{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-entel-843121"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_Gold_DimFecha')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GOLD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Llamadas",
								"type": "DatasetReference"
							},
							"name": "FechaLlamadas"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Datos",
								"type": "DatasetReference"
							},
							"name": "FechaInicio"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Datos",
								"type": "DatasetReference"
							},
							"name": "FechaFin"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Gold_DimFecha",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "OrdenarFechas"
						},
						{
							"name": "FiltrarNulos"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "union2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          fecha as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT fecha FROM [silver].[llamadas]',",
						"     format: 'query') ~> FechaLlamadas",
						"source(output(",
						"          fecha as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT fecha_inicio as fecha FROM [silver].[datos]',",
						"     format: 'query') ~> FechaInicio",
						"source(output(",
						"          fecha as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT fecha_fin as fecha FROM [silver].[datos]',",
						"     format: 'query') ~> FechaFin",
						"FechaLlamadas, FechaInicio union(byName: true)~> union1",
						"union2 sort(asc(fecha, true)) ~> OrdenarFechas",
						"OrdenarFechas filter(!isNull(fecha)) ~> FiltrarNulos",
						"FiltrarNulos aggregate(groupBy(fecha),",
						"     fecha2 = count(fecha)) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          fecha",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"union1, FechaFin union(byName: true)~> union2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_fecha as integer,",
						"          fecha as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          fecha",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Gold_DimNumero')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GOLD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Datos",
								"type": "DatasetReference"
							},
							"name": "NumeroDatos"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Llamadas",
								"type": "DatasetReference"
							},
							"name": "NumeroA"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Llamadas",
								"type": "DatasetReference"
							},
							"name": "NumeroB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Gold_DimNumero",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "union2"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          numero as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT numero FROM [silver].[datos]',",
						"     format: 'query') ~> NumeroDatos",
						"source(output(",
						"          numero as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT numero_a as numero FROM [silver].[llamadas]',",
						"     format: 'query') ~> NumeroA",
						"source(output(",
						"          numero as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT numero_b as numero FROM [silver].[llamadas]',",
						"     format: 'query') ~> NumeroB",
						"NumeroDatos, NumeroA union(byName: true)~> union1",
						"union1, NumeroB union(byName: true)~> union2",
						"union2 sort(asc(numero, true)) ~> sort1",
						"sort1 filter(!isNull(numero)) ~> filter1",
						"filter1 aggregate(groupBy(numero),",
						"     numero2 = count(numero)) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          numero",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_numero as integer,",
						"          numero as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          numero",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Gold_DimRadiobase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GOLD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Datos",
								"type": "DatasetReference"
							},
							"name": "RadiobaseDatos"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Llamadas",
								"type": "DatasetReference"
							},
							"name": "RadiobaseA"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Llamadas",
								"type": "DatasetReference"
							},
							"name": "RadiobaseB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Gold_DimRadiobase",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "union2"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          radiobase as string,",
						"          celda as string,",
						"          latitud as decimal(10,7),",
						"          longitud as decimal(10,7)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT \\n    rbs_utilizada as radiobase,\\n    celda,\\n    latitud,\\n    longitud\\nFROM [silver].[datos]',",
						"     format: 'query') ~> RadiobaseDatos",
						"source(output(",
						"          radiobase as string,",
						"          celda as string,",
						"          latitud as decimal(10,7),",
						"          longitud as decimal(10,7)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT \\n    rbs_utilizada_a as radiobase,\\n    celda_a as celda,\\n    latitud_a as latitud,\\n    longitud_a as longitud\\nFROM [silver].[llamadas]',",
						"     format: 'query') ~> RadiobaseA",
						"source(output(",
						"          radiobase as string,",
						"          celda as string,",
						"          latitud as decimal(10,7),",
						"          longitud as decimal(10,7)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT \\n    rbs_utilizada_b as radiobase,\\n    celda_b as celda,\\n    latitud_b as latitud,\\n    longitud_b as longitud\\nFROM [silver].[llamadas]',",
						"     format: 'query') ~> RadiobaseB",
						"RadiobaseDatos, RadiobaseA union(byName: true)~> union1",
						"union1, RadiobaseB union(byName: true)~> union2",
						"union2 sort(asc(radiobase, true)) ~> sort1",
						"sort1 filter(!isNull(radiobase)) ~> filter1",
						"filter1 aggregate(groupBy(radiobase,",
						"          celda,",
						"          latitud,",
						"          longitud),",
						"     radiobase2 = count(radiobase)) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          radiobase,",
						"          celda,",
						"          latitud,",
						"          longitud",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_radiobase as integer,",
						"          radiobase as string,",
						"          celda as string,",
						"          latitud as decimal(10,7),",
						"          longitud as decimal(10,7)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          radiobase,",
						"          celda,",
						"          latitud,",
						"          longitud",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Gold_DimRegistro')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GOLD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Llamadas",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Gold_DimRegistro",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          registro as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT registro FROM [silver].[llamadas]',",
						"     format: 'query') ~> source1",
						"source1 sort(asc(registro, true)) ~> sort1",
						"sort1 filter(!isNull(registro)) ~> filter1",
						"filter1 aggregate(groupBy(registro),",
						"     registro2 = count(registro)) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          registro",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_registro as integer,",
						"          registro as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          registro",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Gold_DimServicio')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GOLD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Llamadas",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Gold_DimServicio",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          servicio as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT servicio FROM [silver].[llamadas]',",
						"     format: 'query') ~> source1",
						"source1 sort(asc(servicio, true)) ~> sort1",
						"sort1 filter(!isNull(servicio)) ~> filter1",
						"filter1 aggregate(groupBy(servicio),",
						"     servicio2 = count(servicio)) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          servicio",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_servicio as integer,",
						"          servicio as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          servicio",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Silver_Datos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SILVER"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Bronze_05",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_Bronze_06",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Datos",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "SepararLatLong"
						},
						{
							"name": "Limpiar"
						},
						{
							"name": "Reemplazar"
						},
						{
							"name": "Convertir"
						},
						{
							"name": "filtrarNulos"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          fecha_inicio as string,",
						"          fecha_fin as string,",
						"          numero as string,",
						"          imei as string,",
						"          rbs_utilizada as string,",
						"          celda as string,",
						"          latitud_longitud as string,",
						"          subidos as string,",
						"          descargados as string,",
						"          total as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM [bronze].[05]',",
						"     format: 'query') ~> source1",
						"source(output(",
						"          fecha_inicio as string,",
						"          fecha_fin as string,",
						"          numero as string,",
						"          imei as string,",
						"          rbs_utilizada as string,",
						"          celda as string,",
						"          latitud_longitud as string,",
						"          subidos as string,",
						"          descargados as string,",
						"          total as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM [bronze].[06]',",
						"     format: 'query') ~> source2",
						"source1, source2 union(byName: true)~> union1",
						"union1 derive(latitud = substring(latitud_longitud, 1, locate(',-', latitud_longitud) - 1),",
						"          longitud = substring(latitud_longitud, locate(',-', latitud_longitud) + 1, length(latitud_longitud))) ~> SepararLatLong",
						"SepararLatLong derive(latitud = iif(or(isNull(latitud), or(latitud == '-', latitud == '')), '0.0', latitud),",
						"          longitud = iif(or(isNull(longitud), or(longitud == '-', longitud == '')), '0.0', longitud)) ~> Limpiar",
						"Limpiar derive(latitud = replace(latitud, ',', '.'),",
						"          longitud = replace(longitud, ',', '.')) ~> Reemplazar",
						"Reemplazar cast(output(",
						"          fecha_inicio as timestamp 'MM-dd-yyyy HH:mm:ss',",
						"          fecha_fin as timestamp 'MM-dd-yyyy HH:mm:ss',",
						"          subidos as integer,",
						"          descargados as integer,",
						"          total as integer,",
						"          latitud as decimal(10,7),",
						"          longitud as decimal(10,7)",
						"     ),",
						"     errors: true) ~> Convertir",
						"Convertir filter(!isNull(fecha_inicio) && !isNull(fecha_fin)) ~> filtrarNulos",
						"filtrarNulos select(mapColumn(",
						"          fecha_inicio,",
						"          fecha_fin,",
						"          numero,",
						"          imei,",
						"          rbs_utilizada,",
						"          celda,",
						"          subidos,",
						"          descargados,",
						"          total,",
						"          latitud,",
						"          longitud",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          fecha_inicio as timestamp,",
						"          fecha_fin as timestamp,",
						"          numero as string,",
						"          imei as string,",
						"          rbs_utilizada as string,",
						"          celda as string,",
						"          latitud as decimal(10,7),",
						"          longitud as decimal(10,7),",
						"          subidos as integer,",
						"          descargados as integer,",
						"          total as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          fecha_inicio,",
						"          fecha_fin,",
						"          numero,",
						"          imei,",
						"          rbs_utilizada,",
						"          celda,",
						"          latitud,",
						"          longitud,",
						"          subidos,",
						"          descargados,",
						"          total",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Silver_Llamadas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SILVER"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Bronze_03",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Silver_Llamadas",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "LimpiarDuracion"
						},
						{
							"name": "SepararCoordenadasAB"
						},
						{
							"name": "LimpiarCoordenadasAB"
						},
						{
							"name": "ReemplazarSeparadorAB"
						},
						{
							"name": "ConvertirTiposLlamadas"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          servicio as string,",
						"          registro as string,",
						"          numero_a as string,",
						"          imei_a as string,",
						"          rbs_utilizada_a as string,",
						"          celda_a as string,",
						"          latitud_longitud_a as string,",
						"          numero_b as string,",
						"          imei_b as string,",
						"          rbs_utilizada_b as string,",
						"          celda_b as string,",
						"          latitud_longitud_b as string,",
						"          fecha as string,",
						"          duracion as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM [bronze].[03]',",
						"     format: 'query') ~> source1",
						"source1 derive(duracion = replace(duracion, '-', '00:00:00')) ~> LimpiarDuracion",
						"LimpiarDuracion derive(latitud_a = substring(latitud_longitud_a, 1, locate(',-', latitud_longitud_a) - 1),",
						"          longitud_a = substring(latitud_longitud_a, locate(',-', latitud_longitud_a) + 1, length(latitud_longitud_a)),",
						"          latitud_b = substring(latitud_longitud_b, 1, locate(',-', latitud_longitud_b) - 1),",
						"          longitud_b = substring(latitud_longitud_b, locate(',-', latitud_longitud_b) + 1, length(latitud_longitud_b))) ~> SepararCoordenadasAB",
						"SepararCoordenadasAB derive(latitud_a = iif(or(isNull(latitud_a), or(latitud_a == '-', latitud_a == '')), '0.0', latitud_a),",
						"          latitud_b = iif(or(isNull(latitud_b), or(latitud_b == '-', latitud_b == '')), '0.0', latitud_b),",
						"          longitud_a = iif(or(isNull(longitud_a), or(longitud_a == '-', longitud_a == '')), '0.0', longitud_a),",
						"          longitud_b = iif(or(isNull(longitud_b), or(longitud_b == '-', longitud_b == '')), '0.0', longitud_b)) ~> LimpiarCoordenadasAB",
						"LimpiarCoordenadasAB derive(latitud_a = replace(latitud_a, ',', '.'),",
						"          longitud_a = replace(longitud_a, ',', '.'),",
						"          latitud_b = replace(latitud_b, ',', '.'),",
						"          longitud_b = replace(longitud_b, ',', '.')) ~> ReemplazarSeparadorAB",
						"ReemplazarSeparadorAB cast(output(",
						"          fecha as timestamp 'dd-MM-yyyy HH:mm:ss',",
						"          duracion as timestamp 'HH:mm:ss',",
						"          latitud_a as decimal(10,7),",
						"          longitud_a as decimal(10,7),",
						"          latitud_b as decimal(10,7),",
						"          longitud_b as decimal(10,7)",
						"     ),",
						"     errors: true) ~> ConvertirTiposLlamadas",
						"ConvertirTiposLlamadas select(mapColumn(",
						"          servicio,",
						"          registro,",
						"          numero_a,",
						"          imei_a,",
						"          rbs_utilizada_a,",
						"          celda_a,",
						"          numero_b,",
						"          imei_b,",
						"          rbs_utilizada_b,",
						"          celda_b,",
						"          fecha,",
						"          duracion,",
						"          latitud_a,",
						"          longitud_a,",
						"          latitud_b,",
						"          longitud_b",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          servicio as string,",
						"          registro as string,",
						"          numero_a as string,",
						"          imei_a as string,",
						"          rbs_utilizada_a as string,",
						"          celda_a as string,",
						"          latitud_a as decimal(10,7),",
						"          longitud_a as decimal(10,7),",
						"          numero_b as string,",
						"          imei_b as string,",
						"          rbs_utilizada_b as string,",
						"          celda_b as string,",
						"          latitud_b as decimal(10,7),",
						"          longitud_b as decimal(10,7),",
						"          fecha as timestamp,",
						"          duracion as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          servicio,",
						"          registro,",
						"          numero_a,",
						"          imei_a,",
						"          rbs_utilizada_a,",
						"          celda_a,",
						"          latitud_a,",
						"          longitud_a,",
						"          numero_b,",
						"          imei_b,",
						"          rbs_utilizada_b,",
						"          celda_b,",
						"          latitud_b,",
						"          longitud_b,",
						"          fecha,",
						"          duracion",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Bronze_Cargar_Datos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Limpiar_Tablas_Bronze",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQL_DW_Entel",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM [bronze].[03]\nDELETE FROM [bronze].[05]\nDELETE FROM [bronze].[06]"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Cargar_03_Llamadas",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Limpiar_Tablas_Bronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Bronze_03",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cargar_05_Datos",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cargar_03_Llamadas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Bronze_05",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cargar_06_Datos",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cargar_05_Datos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Bronze_06",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "BRONZE"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Gold_Cargar_Todo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Limpiar_Tablas_Gold",
						"description": "",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQL_DW_Entel",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM [gold].[hechos_llamadas];\nDELETE FROM [gold].[hechos_datos];\nDELETE FROM [gold].[dim_fecha];\nDELETE FROM [gold].[dim_numero];\nDELETE FROM [gold].[dim_radiobase];\nDELETE FROM [gold].[dim_servicio];\nDELETE FROM [gold].[dim_registro];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Cargar_DimNumero",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Limpiar_Tablas_Gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Gold_DimNumero",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"NumeroDatos": {},
									"NumeroA": {},
									"NumeroB": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cargar_DimRadiobase",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Limpiar_Tablas_Gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Gold_DimRadiobase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RadiobaseDatos": {},
									"RadiobaseA": {},
									"RadiobaseB": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cargar_DimFecha",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Limpiar_Tablas_Gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Gold_DimFecha",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"FechaLlamadas": {},
									"FechaInicio": {},
									"FechaFin": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cargar_DimServicio",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Limpiar_Tablas_Gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Gold_DimServicio",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cargar_DimRegistro",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Limpiar_Tablas_Gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Gold_DimRegistro",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "GOLD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Gold_DimNumero')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Gold_DimRadiobase')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Gold_DimFecha')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Gold_DimServicio')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Gold_DimRegistro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Silver_Cargar_Datos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQL_DW_Entel",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM [silver].[datos];\nDELETE FROM [silver].[llamadas];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Silver_Datos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Silver_Llamadas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SILVER"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Silver_Datos')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Silver_Llamadas')]"
			]
		}
	]
}