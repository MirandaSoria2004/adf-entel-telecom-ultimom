{
	"name": "DF_Silver_Llamadas",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SQL_Bronze_03",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_SQL_Silver_Llamadas",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "LimpiarDuracion"
				},
				{
					"name": "SepararCoordenadasAB"
				},
				{
					"name": "LimpiarCoordenadasAB"
				},
				{
					"name": "ReemplazarSeparadorAB"
				},
				{
					"name": "ConvertirTiposLlamadas"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          servicio as string,",
				"          registro as string,",
				"          numero_a as string,",
				"          imei_a as string,",
				"          rbs_utilizada_a as string,",
				"          celda_a as string,",
				"          latitud_longitud_a as string,",
				"          numero_b as string,",
				"          imei_b as string,",
				"          rbs_utilizada_b as string,",
				"          celda_b as string,",
				"          latitud_longitud_b as string,",
				"          fecha as string,",
				"          duracion as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM [bronze].[03]',",
				"     format: 'query') ~> source1",
				"source1 derive(duracion = replace(duracion, '-', '00:00:00')) ~> LimpiarDuracion",
				"LimpiarDuracion derive(latitud_a = substring(latitud_longitud_a, 1, locate(',-', latitud_longitud_a) - 1),",
				"          longitud_a = substring(latitud_longitud_a, locate(',-', latitud_longitud_a) + 1, length(latitud_longitud_a)),",
				"          latitud_b = substring(latitud_longitud_b, 1, locate(',-', latitud_longitud_b) - 1),",
				"          longitud_b = substring(latitud_longitud_b, locate(',-', latitud_longitud_b) + 1, length(latitud_longitud_b))) ~> SepararCoordenadasAB",
				"SepararCoordenadasAB derive(latitud_a = iif(or(isNull(latitud_a), or(latitud_a == '-', latitud_a == '')), '0.0', latitud_a),",
				"          latitud_b = iif(or(isNull(latitud_b), or(latitud_b == '-', latitud_b == '')), '0.0', latitud_b),",
				"          longitud_a = iif(or(isNull(longitud_a), or(longitud_a == '-', longitud_a == '')), '0.0', longitud_a),",
				"          longitud_b = iif(or(isNull(longitud_b), or(longitud_b == '-', longitud_b == '')), '0.0', longitud_b)) ~> LimpiarCoordenadasAB",
				"LimpiarCoordenadasAB derive(latitud_a = replace(latitud_a, ',', '.'),",
				"          longitud_a = replace(longitud_a, ',', '.'),",
				"          latitud_b = replace(latitud_b, ',', '.'),",
				"          longitud_b = replace(longitud_b, ',', '.')) ~> ReemplazarSeparadorAB",
				"ReemplazarSeparadorAB cast(output(",
				"          fecha as timestamp 'dd-MM-yyyy HH:mm:ss',",
				"          duracion as timestamp 'HH:mm:ss',",
				"          latitud_a as decimal(10,7),",
				"          longitud_a as decimal(10,7),",
				"          latitud_b as decimal(10,7),",
				"          longitud_b as decimal(10,7)",
				"     ),",
				"     errors: true) ~> ConvertirTiposLlamadas",
				"ConvertirTiposLlamadas select(mapColumn(",
				"          servicio,",
				"          registro,",
				"          numero_a,",
				"          imei_a,",
				"          rbs_utilizada_a,",
				"          celda_a,",
				"          numero_b,",
				"          imei_b,",
				"          rbs_utilizada_b,",
				"          celda_b,",
				"          fecha,",
				"          duracion,",
				"          latitud_a,",
				"          longitud_a,",
				"          latitud_b,",
				"          longitud_b",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          servicio as string,",
				"          registro as string,",
				"          numero_a as string,",
				"          imei_a as string,",
				"          rbs_utilizada_a as string,",
				"          celda_a as string,",
				"          latitud_a as decimal(10,7),",
				"          longitud_a as decimal(10,7),",
				"          numero_b as string,",
				"          imei_b as string,",
				"          rbs_utilizada_b as string,",
				"          celda_b as string,",
				"          latitud_b as decimal(10,7),",
				"          longitud_b as decimal(10,7),",
				"          fecha as timestamp,",
				"          duracion as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          servicio,",
				"          registro,",
				"          numero_a,",
				"          imei_a,",
				"          rbs_utilizada_a,",
				"          celda_a,",
				"          latitud_a,",
				"          longitud_a,",
				"          numero_b,",
				"          imei_b,",
				"          rbs_utilizada_b,",
				"          celda_b,",
				"          latitud_b,",
				"          longitud_b,",
				"          fecha,",
				"          duracion",
				"     )) ~> sink1"
			]
		}
	}
}